name: Test and deploy

on:
  push:
  pull_request:

jobs:
  # test_linux:
  #   name: Test ${{ matrix.os }} with Python ${{ matrix.python }}
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       include:
  #         - os: ubuntu-18.04
  #           python: 3.6
  #         - os: ubuntu-18.04
  #           python: 3.7
  #         - os: ubuntu-20.04
  #           python: 3.8
  #         - os: ubuntu-20.04
  #           python: 3.9
  #         - os: ubuntu-latest
  #           python: 3.9
  #         - os: ubuntu-20.04
  #           python: "pypy-3.6"
  #         - os: ubuntu-latest
  #           python: "pypy-3.7"
  #         - os: ubuntu-latest
  #           python: 3.9
  #           tesseract5: true

  #   env:
  #     OS: ${{ matrix.os }}
  #     PYTHON: ${{ matrix.python }}

  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: "0" # 0=all, needed for setuptools-scm to resolve version tags

  #     - uses: actions/setup-python@v2
  #       name: Install Python
  #       with:
  #         python-version: ${{ matrix.python }}

  #     - name: Install Tesseract 5
  #       if: matrix.tesseract5
  #       run: |
  #         sudo add-apt-repository ppa:alex-p/tesseract-ocr-devel

  #     - name: Install common packages
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y --no-install-recommends \
  #           curl \
  #           ghostscript \
  #           img2pdf \
  #           libffi-dev \
  #           liblept5 \
  #           libsm6 libxext6 libxrender-dev \
  #           pngquant \
  #           poppler-utils \
  #           tesseract-ocr \
  #           tesseract-ocr-deu \
  #           tesseract-ocr-eng \
  #           unpaper \
  #           zlib1g

  #     - name: Install Ubuntu 18.04 packages
  #       if: matrix.os == 'ubuntu-18.04'
  #       run: |
  #         sudo apt-get install -y --no-install-recommends \
  #           libexempi3

  #     - name: Install Ubuntu 20.04 packages
  #       if: matrix.os == 'ubuntu-20.04'
  #       run: |
  #         sudo apt-get install -y --no-install-recommends \
  #           libexempi8

  #     - name: Install Ubuntu packages for PyPy
  #       if: startsWith(matrix.python, 'pypy')
  #       run: |
  #         sudo apt-get install -y --no-install-recommends \
  #           libxml2-dev \
  #           libxslt1-dev \
  #           pypy3-dev

  #     - name: Install Python packages
  #       run: |
  #         python -m pip install .[test]

  #     - name: Report versions
  #       run: |
  #         tesseract --version
  #         gs --version
  #         pngquant --version
  #         unpaper --version
  #         img2pdf --version

  #     - name: Test
  #       run: |
  #         python -m pytest --cov-report xml --cov=ocrmypdf --cov=tests/ -n0 tests/

  #     - name: Upload coverage to Codecov
  #       uses: codecov/codecov-action@v1
  #       with:
  #         files: ./coverage.xml
  #         env_vars: OS,PYTHON

  # test_macos:
  #   name: Test macOS
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [macos-latest]
  #       python: ["3.9"]

  #   env:
  #     OS: ${{ matrix.os }}
  #     PYTHON: ${{ matrix.python }}

  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: "0" # 0=all, needed for setuptools-scm to resolve version tags

  #     - uses: actions/setup-python@v2
  #       name: Install Python
  #       with:
  #         python-version: ${{ matrix.python }}

  #     - name: Install Homebrew deps
  #       run: |
  #         brew update
  #         brew install \
  #           exempi \
  #           ghostscript \
  #           jbig2enc \
  #           leptonica \
  #           openjpeg \
  #           pngquant \
  #           tesseract

  #     - name: Install Python packages
  #       run: |
  #         python -m pip install --upgrade pip
  #         python -m pip install .[test]

  #     - name: Report versions
  #       run: |
  #         tesseract --version
  #         gs --version
  #         pngquant --version
  #         img2pdf --version

  #     - name: Test
  #       run: |
  #         python -m pytest --cov-report xml --cov=ocrmypdf --cov=tests/ -n0 tests/

  #     - name: Upload coverage to Codecov
  #       uses: codecov/codecov-action@v1
  #       with:
  #         files: ./coverage.xml
  #         env_vars: OS,PYTHON

  # test_windows:
  #   name: Test Windows
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [windows-latest]
  #       python: ["3.9"]

  #   env:
  #     OS: ${{ matrix.os }}
  #     PYTHON: ${{ matrix.python }}

  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: "0" # 0=all, needed for setuptools-scm to resolve version tags

  #     - uses: actions/setup-python@v2
  #       name: Install Python
  #       with:
  #         python-version: ${{ matrix.python }}

  #     - name: Install system packages
  #       run: |
  #         choco install --yes --no-progress --pre tesseract
  #         choco install --yes --no-progress ghostscript
  #         choco install --yes --no-progress pngquant

  #     - name: Install Python packages
  #       run: |
  #         python -m pip install --upgrade pip
  #         python -m pip install .[test]

  #     - name: Test
  #       run: |
  #         python -m pytest --cov-report xml --cov=ocrmypdf --cov=tests/ -n0 tests/

  #     - name: Upload coverage to Codecov
  #       uses: codecov/codecov-action@v1
  #       with:
  #         files: ./coverage.xml
  #         env_vars: OS,PYTHON

  # wheel_sdist_linux:
  #   name: Build sdist and wheels
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: "0" # 0=all, needed for setuptools-scm to resolve version tags

  #     - uses: actions/setup-python@v2
  #       name: Install Python
  #       with:
  #         python-version: "3.6"

  #     - name: Make wheels and sdist
  #       run: |
  #         python -m pip install --upgrade pip wheel
  #         python setup.py sdist
  #         python setup.py bdist_wheel

  #     - uses: actions/upload-artifact@v2
  #       with:
  #         path: |
  #           ./dist/*.whl
  #           ./dist/*.tar.gz

  # upload_pypi:
  #   name: Deploy artifacts to PyPI
  #   needs: [wheel_sdist_linux, test_linux, test_macos, test_windows]
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
  #   steps:
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: artifact
  #         path: dist

  #     - uses: pypa/gh-action-pypi-publish@master
  #       with:
  #         user: __token__
  #         password: ${{ secrets.TOKEN_PYPI }}
  #         # repository_url: https://test.pypi.org/legacy/

  docker:
    name: Build Docker images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - id: docker-tag
        uses: yuya-takeyama/docker-tag-from-github-ref-action@v1

      - uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Image name lowercased
        run: |
          echo "IMAGE_NAME=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - uses: docker/build-push-action@v2
        with:
          tags: ghcr.io/${{ env.IMAGE_NAME }}:${{ steps.docker-tag.outputs.tag }}
          push: true
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
          build-args: |
            SETUPTOOLS_SCM_PRETEND_VERSION=0.0.1
